<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Ehlxr's Blog</title><link>https://3w.vercel.app/categories/Git/</link><description>Recent content in Git on Ehlxr's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 06 Jan 2021 14:01:50 +0800</lastBuildDate><atom:link href="https://3w.vercel.app/categories/Git/rss.xml" rel="self" type="application/rss+xml"/><item><title>Docker 安装 Gitea/Gogs 与主机共享 22 端口</title><link>https://3w.vercel.app/2021/01/06/docker-gitea-share-port-22-with-host/</link><pubDate>Wed, 06 Jan 2021 14:01:50 +0800</pubDate><guid>https://3w.vercel.app/2021/01/06/docker-gitea-share-port-22-with-host/</guid><description>&lt;p>如果主机的 22 端口已被使用，使用 &lt;code>Docker&lt;/code> 安装 &lt;code>Gitea&lt;/code> 时只能把容器的 22 端口映射到主机的其它端口（如：10022），这是没有任何问题的。但是以 &lt;code>SSH&lt;/code> 方式 &lt;code>clone&lt;/code> 项目时，&lt;code>URL&lt;/code> 长这样
&lt;code>ssh://git@git.example.com:10022:username/project.git&lt;/code>&lt;/p>
&lt;p>如果我们想要类似以下这样的 &lt;code>URL&lt;/code> 时就需要把 &lt;code>Gitea&lt;/code> 容器的和主机共享 22 端口
&lt;code>git@git.example.com:username/project.git&lt;/code>&lt;/p>
&lt;p>下面总结一下使用 &lt;code>Docker&lt;/code> 安装 &lt;code>Gitea&lt;/code> 共享主机 22 端口的主要步骤，&lt;code>Gogs&lt;/code> 应该是同理。&lt;/p>
&lt;h3 id="创建-git-用户">创建 git 用户&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Create git user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adduser git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Make sure user has UID and GID 1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usermod -u &lt;span style="color:#40a070">1000&lt;/span> -g &lt;span style="color:#40a070">1000&lt;/span> git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Create docker group&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>groupadd docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Add git user to docker group&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usermod -aG docker git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic"># Create the gitea data directory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p /home/git/gitea/data
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[转] Git查看、删除、重命名远程分支和tag</title><link>https://3w.vercel.app/2017/06/15/%E8%BD%AC-Git%E6%9F%A5%E7%9C%8B%E5%88%A0%E9%99%A4%E9%87%8D%E5%91%BD%E5%90%8D%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8Ctag/</link><pubDate>Thu, 15 Jun 2017 10:18:29 +0000</pubDate><guid>https://3w.vercel.app/2017/06/15/%E8%BD%AC-Git%E6%9F%A5%E7%9C%8B%E5%88%A0%E9%99%A4%E9%87%8D%E5%91%BD%E5%90%8D%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8Ctag/</guid><description>&lt;h2 id="查看远程分支">查看远程分支&lt;/h2>
&lt;p>加上 &lt;code>-a&lt;/code> 参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git branch -a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> remote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tungway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v1.52
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* zrong
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> remotes/origin/master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> remotes/origin/tungway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> remotes/origin/v1.52
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> remotes/origin/zrong
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除远程分支和-tag">删除远程分支和 &lt;code>tag&lt;/code>&lt;/h2>
&lt;p>在 &lt;code>Git v1.7.0&lt;/code> 之后，可以使用这种语法删除远程分支：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ git push origin --delete &amp;lt;branchName&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[转] Git 版本回滚</title><link>https://3w.vercel.app/2016/11/07/%E8%BD%AC-Git-%E7%89%88%E6%9C%AC%E5%9B%9E%E6%BB%9A/</link><pubDate>Mon, 07 Nov 2016 16:53:38 +0000</pubDate><guid>https://3w.vercel.app/2016/11/07/%E8%BD%AC-Git-%E7%89%88%E6%9C%AC%E5%9B%9E%E6%BB%9A/</guid><description>&lt;blockquote>
&lt;p>总有一天你会遇到下面的问题：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>改完代码匆忙提交，上线发现有问题，怎么办？赶紧回滚。&lt;/li>
&lt;li>改完代码测试也没有问题，但是上线发现你的修改影响了之前运行正常的代码报错，必须回滚。&lt;/li>
&lt;/ul>
&lt;p>这些开发中很常见的问题，所以 &lt;code>git&lt;/code> 的取消提交，回退甚至返回上一版本都是特别重要的。大致分为下面 &lt;code>2&lt;/code> 种情况：&lt;/p>
&lt;h1 id="一没有-push">一、没有 push&lt;/h1>
&lt;p>这种情况发生在你的本地代码仓库，可能你 &lt;code>add&lt;/code>，&lt;code>commit&lt;/code> 以后发现代码有点问题，准备取消提交，用到下面命令回退到某个版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git reset &lt;span style="color:#666">[&lt;/span>--soft | --mixed | --hard&lt;span style="color:#666">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>5 分钟搭建 Git 服务器-Gogs</title><link>https://3w.vercel.app/2016/09/06/gogs-installation-introduction/</link><pubDate>Tue, 06 Sep 2016 12:15:14 +0000</pubDate><guid>https://3w.vercel.app/2016/09/06/gogs-installation-introduction/</guid><description>&lt;blockquote>
&lt;p>Gogs 基于 Go 语言的自助 Git 服务。它具有易安装、跨平台、轻量级、开源化等特性&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;!-- ![][1] -->
&lt;p>{% img
&lt;a href="https://cdn.jsdelivr.net/gh/0vo/oss/images/gogs-logo.png" title="https://cdn.jsdelivr.net/gh/0vo/oss/images/gogs-logo.png" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
https://cdn.jsdelivr.net/gh/0vo/oss/images/gogs-logo.png
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a> 150 %}&lt;/p>
&lt;p>最近新到一家公司，发现在使用 Gogs 搭建 Git 服务，遂研究了一下，和前段时间研究的 GitLab 做了一个简单的对比，虽然 Gogs 相对与 GitLab 还比较年轻，也许没有 GitLab 强大和稳健，但 Gogs 更加简单易用，而且能够满足正常的工作使用。&lt;/p>
&lt;p>Gogs 是轻量级的 Git 服务，正如官方介绍的：一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。最大程度上节省您的服务器资源！关键的一点是免费开源的，所有的代码都开源在 GitHub 上。下面结合官方的介绍，总结一下在 Linux 系统下的安装方法，真的是相当的简单，5 分钟足矣！&lt;/p></description></item><item><title>CentOS 中配置 Git 命令自动补全</title><link>https://3w.vercel.app/2016/09/04/CentOS-%E4%B8%AD%E9%85%8D%E7%BD%AE-Git-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</link><pubDate>Sun, 04 Sep 2016 10:03:35 +0000</pubDate><guid>https://3w.vercel.app/2016/09/04/CentOS-%E4%B8%AD%E9%85%8D%E7%BD%AE-Git-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</guid><description>&lt;h1 id="1-step-1">1. Step 1&lt;/h1>
&lt;p>保存以下文件的内容为：&lt;code>git-completion.bash&lt;/code>&lt;/p>
&lt;p>
&lt;a href="https://github.com/git/git/blob/master/contrib/completion/git-completion.bash" title="git-completion.bash" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
git-completion.bash
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/p>
&lt;h1 id="2--step-2">2. Step 2&lt;/h1>
&lt;p>将上述文件 &lt;code>git-completion.bash&lt;/code> copy 至个人 &lt;code>home&lt;/code> 目录，可设为隐藏文件以免后续被误删。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cp git-completion.bash ~/.git-completion.bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>CentOS 系统下 GitLab 搭建与基本配置</title><link>https://3w.vercel.app/2016/07/31/CentOS-%E7%B3%BB%E7%BB%9F%E4%B8%8B-GitLab-%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 31 Jul 2016 18:15:47 +0000</pubDate><guid>https://3w.vercel.app/2016/07/31/CentOS-%E7%B3%BB%E7%BB%9F%E4%B8%8B-GitLab-%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid><description>&lt;blockquote>
&lt;p>
&lt;a href="https://about.gitlab.com/" title="GitLab 是一个开源的版本管理系统，提供了类似于 GitHub 的源代码浏览，管理缺陷和注释等功能，你可以将代码免费托管到 GitLab.com，而且不限项目数量和成员数。最吸引人的一点是，可以在自己的服务器上搭建 GitLab CE （社区免费版）版本，方便内部团队协作开发和代码管理。" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
GitLab 是一个开源的版本管理系统，提供了类似于 GitHub 的源代码浏览，管理缺陷和注释等功能，你可以将代码免费托管到 GitLab.com，而且不限项目数量和成员数。最吸引人的一点是，可以在自己的服务器上搭建 GitLab CE （社区免费版）版本，方便内部团队协作开发和代码管理。
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>下面介绍如何在 CentOS 服务器上搭建 GitLab CE 版本，以及一些基本的配置。&lt;/p>
&lt;h1 id="1-安装">1. 安装&lt;/h1>
&lt;p>GitLab 提供了两种安装方式：源码手动编译安装和软件包管理安装。&lt;/p>
&lt;p>源码手动编译安装虽然配置灵活，但过程比较麻烦，不容易安装成功，所以我这里选择软件包管理安装的形式。&lt;/p>
&lt;h2 id="11-使用-gitlab-提供仓库在线安装">1.1 使用 GitLab 提供仓库在线安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum install gitlab-ce
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>GitHub 更新已经 fork 的项目</title><link>https://3w.vercel.app/2016/07/28/update-from-github-fork/</link><pubDate>Thu, 28 Jul 2016 10:12:15 +0000</pubDate><guid>https://3w.vercel.app/2016/07/28/update-from-github-fork/</guid><description>&lt;blockquote>
&lt;p>GitHub 上有个很方便的功能叫 fork，将别人的工程一键复制到自己账号下。这个功能很方便，但有点不足的是，当源项目更新后，你 fork 的分支并不会一起更新，需要自己手动去更新，下面记录下网上找到的更新的开发方法。&lt;/p>
&lt;/blockquote>
&lt;h3 id="1-在本地装好-github-客户端或者-git-客户端">1. 在本地装好 GitHub 客户端，或者 Git 客户端&lt;/h3>
&lt;h3 id="2-clone-自己的-fork-分支到本地">2. clone 自己的 fork 分支到本地&lt;/h3>
&lt;p>可以直接使用 GitHub 客户端，clone 到本地，如果使用命令行，命令为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone git@github.com:ehlxr/strman-java.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Git 同时 push 到多个远程仓库</title><link>https://3w.vercel.app/2016/07/24/Git-%E5%90%8C%E6%97%B6-push-%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link><pubDate>Sun, 24 Jul 2016 18:55:59 +0000</pubDate><guid>https://3w.vercel.app/2016/07/24/Git-%E5%90%8C%E6%97%B6-push-%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid><description>&lt;h3 id="方法一">方法一&lt;/h3>
&lt;p>如果一个本地仓库添加多个远程仓库，不想 git push 多次，可以修改 .git/config 文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vim .git/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如以下信息表示在 git@OSC 和 GitHub 两个远程托管&lt;/p>
&lt;p>&lt;img src="https://3w.vercel.app/imgs/img-lazy-loading.gif" data-src="https://cdn.jsdelivr.net/gh/0vo/oss/images/20160724193534.png" alt="" />&lt;/p></description></item></channel></rss>