<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mock on Ehlxr's Blog</title><link>https://3w.vercel.app/tags/Mock/</link><description>Recent content in Mock on Ehlxr's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 25 Jul 2017 19:01:14 +0000</lastBuildDate><atom:link href="https://3w.vercel.app/tags/Mock/rss.xml" rel="self" type="application/rss+xml"/><item><title>使用 PowerMock 进行单元测试</title><link>https://3w.vercel.app/2017/07/25/use-introduction-of-powermock/</link><pubDate>Tue, 25 Jul 2017 19:01:14 +0000</pubDate><guid>https://3w.vercel.app/2017/07/25/use-introduction-of-powermock/</guid><description>&lt;blockquote>
&lt;p>单元测试（Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。如果我们写的代码依赖于某些模块对象，而单元测试过程中这些对象又很难手动创建，或者模块还没有开发完成，那么就使用一个虚拟的对象来完成单元测试，这就是所谓的 Mock。&lt;/p>
&lt;/blockquote>
&lt;p>Java 单元测试中比较流行的 Mock 测试框架有
&lt;a href="http://www.jmock.org/" title="jMock" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
jMock
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>、
&lt;a href="http://easymock.org/" title="EasyMock" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
EasyMock
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>、
&lt;a href="https://github.com/mockito/mockito" title="Mockito" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
Mockito
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>，但是这些 Mock 工具都不能 Mock &lt;code>static&lt;/code>、&lt;code>final&lt;/code>、&lt;code>private&lt;/code> 方法等，而
&lt;a href="https://github.com/powermock/powermock" title="PowerMock" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
PowerMock
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a> 能够做到。&lt;/p>
&lt;p>使用 PowerMock，首先需要使用 &lt;code>@RunWith(PowerMockRunner.class)&lt;/code> 将测试用例的 Runner 改为 &lt;code>PowerMockRunner&lt;/code>。如果要 Mock &lt;code>static&lt;/code>、&lt;code>final&lt;/code>、&lt;code>private&lt;/code> 等方法的时候，就需要加注解 &lt;code>@PrepareForTest&lt;/code>。&lt;/p>
&lt;p>PowerMock 有两个版本，一个是基于 EasyMock 实现的，另一个是基于 Mockito 实现的。&lt;/p>
&lt;p>下面我将以 PowerMock 的 Mockito 的版本来讲述如何使用 PowerMock。&lt;/p></description></item></channel></rss>