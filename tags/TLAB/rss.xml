<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TLAB on Ehlxr's Blog</title><link>https://3w.vercel.app/tags/TLAB/</link><description>Recent content in TLAB on Ehlxr's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 27 Jul 2021 09:35:05 +0000</lastBuildDate><atom:link href="https://3w.vercel.app/tags/TLAB/rss.xml" rel="self" type="application/rss+xml"/><item><title>JVM TLAB</title><link>https://3w.vercel.app/2021/07/27/jvm-tlab/</link><pubDate>Tue, 27 Jul 2021 09:35:05 +0000</pubDate><guid>https://3w.vercel.app/2021/07/27/jvm-tlab/</guid><description>&lt;p>&lt;strong>TLAB（Thread Local Allocation Buffer）&lt;/strong> 线程本地分配缓存区&lt;/p>
&lt;ol>
&lt;li>由于对象一般分配在堆上，而堆是线程共用的，因此可能会有多个线程在堆上申请空间，而每一次的&lt;strong>对象分配都必须加锁保证线程同步&lt;/strong>，会使分配的效率下降。考虑到对象分配几乎是 &lt;code>Java&lt;/code> 中最常用的操作，因此 &lt;code>JVM&lt;/code> 使用了 &lt;code>TLAB&lt;/code> 这样的线程专有区域来避免多线程冲突，提高对象分配的效率。&lt;/li>
&lt;li>我们说 &lt;code>TLAB&lt;/code> 是线程独享的，但是只是在 &lt;strong>“分配”&lt;/strong> 这个动作上是线程独享的，至于在读取、垃圾回收等动作上都是线程共享的。而且在使用上也没有什么区别&lt;/li>
&lt;li>&lt;code>JVM&lt;/code> 为了提升对象内存分配的效率，对于所创建的线程都会分配一块独立的空间 &lt;code>TLAB&lt;/code>，其大小由 &lt;code>JVM&lt;/code> 根据运行的情况计算而得，在 &lt;code>TLAB&lt;/code> 上分配对象时不需要加锁，因此 &lt;strong>JVM 在给线程的对象分配内存时会尽量的在 TLAB 上分配&lt;/strong>，在这种情况下 JVM 中分配对象内存的性能和 &lt;code>C&lt;/code> 基本是一样高效的，但如果对象过大的话则仍然是直接使用堆空间分配&lt;/li>
&lt;li>在 &lt;code>TLAB&lt;/code> 分配之后，并不影响对象的移动和回收，也就是说，虽然对象刚开始可能通过 &lt;code>TLAB&lt;/code> 分配内存，存放在 &lt;code>Eden&lt;/code> 区，但是还是会被垃圾回收或者被移到 &lt;code>Survivor Space、Old Gen&lt;/code> 等。&lt;/li>
&lt;li>&lt;strong>“堆是线程共享的内存区域” 这句话并不完全正确&lt;/strong>，因为 &lt;code>TLAB&lt;/code> 是堆内存的一部分，它在读取上确实是线程共享的，但是在内存分配上，是线程独享的。&lt;/li>
&lt;li>&lt;code>TLAB&lt;/code> 的空间其实并不大（默认是 &lt;code>eden&lt;/code> 区空间的 &lt;code>1%&lt;/code>），所以大对象还是可能需要在堆内存中直接分配。那么，对象的内存分配步骤就是先尝试 &lt;code>TLAB&lt;/code> 分配，空间不足之后，再判断是否应该直接进入老年代，然后再确定是再 &lt;code>eden&lt;/code> 分配还是在老年代分配。&lt;/li>
&lt;/ol></description></item></channel></rss>