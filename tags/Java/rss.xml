<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Ehlxr's Blog</title><link>https://3w.vercel.app/tags/Java/</link><description>Recent content in Java on Ehlxr's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 27 Jul 2021 09:35:05 +0000</lastBuildDate><atom:link href="https://3w.vercel.app/tags/Java/rss.xml" rel="self" type="application/rss+xml"/><item><title>使用 Lambda 优雅的处理 Java 异常</title><link>https://3w.vercel.app/2020/12/06/replace-java-try-catch-with-lambda/</link><pubDate>Sun, 06 Dec 2020 22:48:28 +0800</pubDate><guid>https://3w.vercel.app/2020/12/06/replace-java-try-catch-with-lambda/</guid><description>&lt;p>使用过 &lt;code>Java&lt;/code> 的函数接口，就会被简介的语法深深的吸引，苦于代码中大量的 &lt;code>try...catch&lt;/code> 繁琐代码，最近借鉴 &lt;code>java.util.Optional&lt;/code> 的实现写了个简化的小工具。&lt;/p>
&lt;p>以 &lt;code>Long.valueOf()&lt;/code> 为例，假如需要把一个字符串转换为&lt;code>long&lt;/code>，如果转换失败则设置默认值为 &lt;code>-1&lt;/code>，一般会作如下处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String param &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#4070a0">&amp;#34;10s&amp;#34;&lt;/span>&lt;span style="color:#666">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#902000">long&lt;/span> result&lt;span style="color:#666">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020;font-weight:bold">try&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> Long&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">parseLong&lt;/span>&lt;span style="color:#666">(&lt;/span>param&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">}&lt;/span> &lt;span style="color:#007020;font-weight:bold">catch&lt;/span> &lt;span style="color:#666">(&lt;/span>Exception e&lt;span style="color:#666">)&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// 捕获异常处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#666">-&lt;/span>1L&lt;span style="color:#666">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果使用简化工具：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Long result &lt;span style="color:#666">=&lt;/span> Try&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">of&lt;/span>&lt;span style="color:#666">(()&lt;/span> &lt;span style="color:#666">-&amp;gt;&lt;/span> Long&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">valueOf&lt;/span>&lt;span style="color:#666">(&lt;/span>param&lt;span style="color:#666">)).&lt;/span>&lt;span style="color:#4070a0">trap&lt;/span>&lt;span style="color:#666">(&lt;/span>e &lt;span style="color:#666">-&amp;gt;&lt;/span> &lt;span style="color:#666">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#60a0b0;font-style:italic">// 自行异常处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">&lt;/span>&lt;span style="color:#666">}).&lt;/span>&lt;span style="color:#4070a0">get&lt;/span>&lt;span style="color:#666">(-&lt;/span>1L&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Long result &lt;span style="color:#666">=&lt;/span> Try&lt;span style="color:#666">.&amp;lt;&lt;/span>String&lt;span style="color:#666">,&lt;/span> Long&lt;span style="color:#666">&amp;gt;&lt;/span>of&lt;span style="color:#666">(&lt;/span>Long&lt;span style="color:#666">::&lt;/span>valueOf&lt;span style="color:#666">).&lt;/span>&lt;span style="color:#4070a0">trap&lt;/span>&lt;span style="color:#666">(&lt;/span>Throwable&lt;span style="color:#666">::&lt;/span>printStackTrace&lt;span style="color:#666">).&lt;/span>&lt;span style="color:#4070a0">apply&lt;/span>&lt;span style="color:#666">(&lt;/span>param&lt;span style="color:#666">).&lt;/span>&lt;span style="color:#4070a0">get&lt;/span>&lt;span style="color:#666">(-&lt;/span>1L&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不需要异常处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Long result &lt;span style="color:#666">=&lt;/span> Try&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">of&lt;/span>&lt;span style="color:#666">(()&lt;/span> &lt;span style="color:#666">-&amp;gt;&lt;/span> Long&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">valueOf&lt;/span>&lt;span style="color:#666">(&lt;/span>param&lt;span style="color:#666">)).&lt;/span>&lt;span style="color:#4070a0">get&lt;/span>&lt;span style="color:#666">(-&lt;/span>1L&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#60a0b0;font-style:italic">// Long result = Try.&amp;lt;String, Long&amp;gt;of(Long::valueOf).apply(param).get(-1L);
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果处理没有返回值的代码，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ArrayList&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> list &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> ArrayList&lt;span style="color:#666">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Try&lt;span style="color:#666">.&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span>of&lt;span style="color:#666">(&lt;/span>v &lt;span style="color:#666">-&amp;gt;&lt;/span> list&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">add&lt;/span>&lt;span style="color:#666">(&lt;/span>10&lt;span style="color:#666">,&lt;/span> v&lt;span style="color:#666">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">trap&lt;/span>&lt;span style="color:#666">(&lt;/span>e &lt;span style="color:#666">-&amp;gt;&lt;/span> System&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">out&lt;/span>&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">println&lt;/span>&lt;span style="color:#666">(&lt;/span>e&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">getMessage&lt;/span>&lt;span style="color:#666">()))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">accept&lt;/span>&lt;span style="color:#666">(&lt;/span>&lt;span style="color:#4070a0">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>HTTPS 笔记</title><link>https://3w.vercel.app/2020/03/11/https-note/</link><pubDate>Wed, 11 Mar 2020 17:57:16 +0800</pubDate><guid>https://3w.vercel.app/2020/03/11/https-note/</guid><description>随着互联网的迅速发展，网络安全问题日益凸显，现在 Chrome 浏览器已经开始阻止非 https 网站的访问了。对于 https 的流程一直不是十分清晰，借着还没有完全复工有时间</description></item><item><title>Maven 配置文件 settings.xml 详解</title><link>https://3w.vercel.app/2020/03/02/maven-setting-config/</link><pubDate>Mon, 02 Mar 2020 14:50:48 +0800</pubDate><guid>https://3w.vercel.app/2020/03/02/maven-setting-config/</guid><description>settings.xml 是 maven 的配置文件，用户配置文件存放于 ${user.home}/.m2/ 目录下，系统全局配置文件放置于 ${maven.home}/conf/ 目录下，pom.xml 是 maven 的项目的配置文件。 配置文件的优先级从高到低为</description></item><item><title>[转]理解 Java 动态代理</title><link>https://3w.vercel.app/2020/01/02/java-dynamic-proxy/</link><pubDate>Thu, 02 Jan 2020 15:28:26 +0800</pubDate><guid>https://3w.vercel.app/2020/01/02/java-dynamic-proxy/</guid><description>原文地址 动态代理是 Java 语言中非常经典的一种设计模式，也是所有设计模式中最难理解的一种。本文将通过一个简单的例子模拟 JDK 动态代理实现，让你彻底明白</description></item><item><title>JVM-垃圾回收（二）</title><link>https://3w.vercel.app/2018/08/23/jvm-gc2/</link><pubDate>Thu, 23 Aug 2018 15:15:07 +0000</pubDate><guid>https://3w.vercel.app/2018/08/23/jvm-gc2/</guid><description>&lt;blockquote>
&lt;p>接着上次 JVM 中 GC 机制的总结，这次主要复习一下垃圾收集的常用算法和 Minor GC、Full GC 相关的一些知识点。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一垃圾收集算法">一、垃圾收集算法&lt;/h2>
&lt;h3 id="11-标记---清除mark-sweep">1.1 标记 - 清除（Mark-Sweep）&lt;/h3>
&lt;p>算法分成 “标记”、“清除” 两个阶段：首先标记出所有需要回收的对象（两次标记），在标记完成后统一回收所有被标记的对象。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://3w.vercel.app/imgs/img-lazy-loading.gif" data-src="https://cdn.jsdelivr.net/gh/0vo/oss/images/687148dbly1ftwah4c7cxj20gv07b0sz.jpg" alt="" />&lt;/p></description></item><item><title>JVM-垃圾回收（一）</title><link>https://3w.vercel.app/2018/08/23/jvm-gc1/</link><pubDate>Thu, 23 Aug 2018 11:25:52 +0000</pubDate><guid>https://3w.vercel.app/2018/08/23/jvm-gc1/</guid><description>&lt;p>在 JVM 运行时数据区域中，程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。垃圾回收主要是针对 Java 堆和方法区进行。&lt;/p>
&lt;h2 id="一判断对象状态">一、判断对象状态&lt;/h2>
&lt;p>JVM 在回收一个对象时，首先要判断这个对象的状态，如果判断对象为无效的（没有被任何对象或变量引用），则需要被 JVM 垃圾回收器回收。&lt;/p>
&lt;h3 id="11-引用计数算法">1.1 引用计数算法&lt;/h3>
&lt;p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数不为 0 的对象仍然存活。&lt;/p></description></item><item><title>Java 位运算笔记</title><link>https://3w.vercel.app/2018/08/02/java-positional-operator/</link><pubDate>Thu, 02 Aug 2018 17:24:58 +0000</pubDate><guid>https://3w.vercel.app/2018/08/02/java-positional-operator/</guid><description>&lt;p>一些零碎的知识点总是似懂非懂，用法老是模棱两可，每次都要去网络上查询，长时间不用又忘记了。比如 Java 中的位运算。今天抽空归纳总结一下，加强一下记忆。&lt;/p>
&lt;h2 id="一原码反码和补码">一、原码、反码和补码&lt;/h2>
&lt;h3 id="11-原码">1.1 原码&lt;/h3>
&lt;p>一个数在计算机中的二进制表示形式，叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为 0, 负数为 1。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。&lt;/p>
&lt;p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如 8 位二进制:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>[+1] 原 = 0000 0001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[-1] 原 = 1000 0001
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一位是符号位，因为第一位是符号位，所以 8 位二进制数的取值范围就是：[1111 1111 , 0111 1111]，即：[-127 , 127]&lt;/p></description></item><item><title>JVM-运行时数据区域</title><link>https://3w.vercel.app/2018/04/08/jvm-runtime-data-area/</link><pubDate>Sun, 08 Apr 2018 17:30:33 +0000</pubDate><guid>https://3w.vercel.app/2018/04/08/jvm-runtime-data-area/</guid><description>&lt;p>Java 的内存区域划分绝不仅仅只是堆内存（heap）和栈内存（Stack），实际上 JVM 在执行 Java 程序的过程中会把它所管理的内存划分为以下几个数据区域：程序计数器、Java 虚拟机栈、本地方法栈、堆、方法区、运行时常量和直接内存。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://3w.vercel.app/imgs/img-lazy-loading.gif" data-src="https://cdn.jsdelivr.net/gh/0vo/oss/images/jvm-runtime-data-area.png" alt="Runtime DataArea" />&lt;/p></description></item><item><title>使用 PowerMock 进行单元测试</title><link>https://3w.vercel.app/2017/07/25/use-introduction-of-powermock/</link><pubDate>Tue, 25 Jul 2017 19:01:14 +0000</pubDate><guid>https://3w.vercel.app/2017/07/25/use-introduction-of-powermock/</guid><description>&lt;blockquote>
&lt;p>单元测试（Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。如果我们写的代码依赖于某些模块对象，而单元测试过程中这些对象又很难手动创建，或者模块还没有开发完成，那么就使用一个虚拟的对象来完成单元测试，这就是所谓的 Mock。&lt;/p>
&lt;/blockquote>
&lt;p>Java 单元测试中比较流行的 Mock 测试框架有
&lt;a href="http://www.jmock.org/" title="jMock" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
jMock
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>、
&lt;a href="http://easymock.org/" title="EasyMock" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
EasyMock
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>、
&lt;a href="https://github.com/mockito/mockito" title="Mockito" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
Mockito
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>，但是这些 Mock 工具都不能 Mock &lt;code>static&lt;/code>、&lt;code>final&lt;/code>、&lt;code>private&lt;/code> 方法等，而
&lt;a href="https://github.com/powermock/powermock" title="PowerMock" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
PowerMock
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a> 能够做到。&lt;/p>
&lt;p>使用 PowerMock，首先需要使用 &lt;code>@RunWith(PowerMockRunner.class)&lt;/code> 将测试用例的 Runner 改为 &lt;code>PowerMockRunner&lt;/code>。如果要 Mock &lt;code>static&lt;/code>、&lt;code>final&lt;/code>、&lt;code>private&lt;/code> 等方法的时候，就需要加注解 &lt;code>@PrepareForTest&lt;/code>。&lt;/p>
&lt;p>PowerMock 有两个版本，一个是基于 EasyMock 实现的，另一个是基于 Mockito 实现的。&lt;/p>
&lt;p>下面我将以 PowerMock 的 Mockito 的版本来讲述如何使用 PowerMock。&lt;/p></description></item><item><title>[转] Java 程序员的 Golang 入门笔记</title><link>https://3w.vercel.app/2017/07/22/from-java-to-golang/</link><pubDate>Sat, 22 Jul 2017 11:23:10 +0000</pubDate><guid>https://3w.vercel.app/2017/07/22/from-java-to-golang/</guid><description>&lt;blockquote>
&lt;p>最近抽空学习了一下 &lt;code>Go&lt;/code> 语言，好多特性感觉非常棒，由于高效的开发效率以及性能，现在好多优秀的开源项目都是基于 &lt;code>Go&lt;/code> 开发，比如 &lt;code>Docker&lt;/code>、&lt;code>etcd&lt;/code>、&lt;code>consul&lt;/code>、&lt;code>Kubernetes&lt;/code> 等。&lt;code>Go&lt;/code> 势必会在互联网技术的服务化，容器化的将来大展拳脚。正好网上看到一篇关于 &lt;code>Java&lt;/code> 程序员入门 &lt;code>Golang&lt;/code> 的文章，写的挺好的，所以特此转载过来，再加上自己的一些学习经验，供大家参考。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Golang&lt;/code> 从 &lt;code>09&lt;/code> 年发布，中间经历了多个版本的演进，已经渐渐趋于成熟，其媲美于 &lt;code>C&lt;/code> 语言的性能、&lt;code>Python&lt;/code> 的开发效率，又被称为 21 世纪的 &lt;code>C&lt;/code> 语言，尤其适合开发后台服务。这篇文章主要是介绍 &lt;code>Golang&lt;/code> 的一些主要特性，和 &lt;code>Java&lt;/code> 做一个对比，以便更好的理解 &lt;code>Golang&lt;/code> 这门语言。&lt;/p>
&lt;p>关于 &lt;code>Golang&lt;/code> 环境的搭建就不讲了，可以参考
&lt;a href="https://golang.org/doc/install" title="官方文档" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
官方文档
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a> 或者大神
&lt;a href="https://github.com/astaxie" title="astaxie" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
astaxie
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a> 的开源书籍
&lt;a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.0.md" title="build-web-application-with-golang" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
build-web-application-with-golang
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a> 的相关篇章。下面我没让你就从 &lt;code>Go&lt;/code> 版本的&lt;code> Hello World&lt;/code> 开始。&lt;/p></description></item><item><title>Java 获取系统的配置信息</title><link>https://3w.vercel.app/2017/03/29/Java-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</link><pubDate>Wed, 29 Mar 2017 15:33:54 +0000</pubDate><guid>https://3w.vercel.app/2017/03/29/Java-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</guid><description>&lt;p>&lt;code>System.getProperty()&lt;/code> 可以获取系统的配置信息，最近项目开发中要用到临时文件，所以想到了使用系统临时文件目录，最后得知可以通过 &lt;code>System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;)&lt;/code> 可以获取不同操作系统平台下的临时目录。比如：&lt;/p>
&lt;p>在 &lt;code>windows&lt;/code> 中的目录是：&lt;code>C:\Users\登录用户~1\AppData\Local\Temp\&lt;/code>&lt;/p>
&lt;p>在 &lt;code>linux&lt;/code> 下的目录是：&lt;code>/tmp&lt;/code>&lt;/p>
&lt;p>在 &lt;code>Mac&lt;/code> 下目录是 &lt;code>/var/folders/c8/2c9rf0ss2w9c8tdtfcgvg9kh0000gn/T/&lt;/code> （我感觉是不同电脑应该不一样）&lt;/p></description></item><item><title>[转] JMS 基本概念</title><link>https://3w.vercel.app/2016/07/21/%E8%BD%AC-JMS-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Thu, 21 Jul 2016 12:35:43 +0000</pubDate><guid>https://3w.vercel.app/2016/07/21/%E8%BD%AC-JMS-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>&lt;p>JMS（JAVA Message Service,java消息服务）API是一个消息服务的标准或者说是规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。&lt;/p>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;p>JMS是java的消息服务，JMS的客户端之间可以通过JMS服务进行异步的消息传输。&lt;/p>
&lt;h2 id="消息模型">消息模型&lt;/h2>
&lt;ul>
&lt;li>Point-to-Point(P2P)&lt;/li>
&lt;li>Publish/Subscribe(Pub/Sub)&lt;/li>
&lt;/ul>
&lt;p>即点对点和发布订阅模型&lt;/p></description></item><item><title>Java List与数组之间的转换</title><link>https://3w.vercel.app/2016/07/20/Java-List%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</link><pubDate>Wed, 20 Jul 2016 15:52:33 +0000</pubDate><guid>https://3w.vercel.app/2016/07/20/Java-List%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid><description>&lt;h3 id="1-数组转换为list">1. 数组转换为List&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#666">[]&lt;/span> arr &lt;span style="color:#666">=&lt;/span> &lt;span style="color:#007020;font-weight:bold">new&lt;/span> String&lt;span style="color:#666">[]&lt;/span> &lt;span style="color:#666">{&lt;/span>&lt;span style="color:#4070a0">&amp;#34;str1&amp;#34;&lt;/span>&lt;span style="color:#666">,&lt;/span> &lt;span style="color:#4070a0">&amp;#34;str2&amp;#34;&lt;/span>&lt;span style="color:#666">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#666">&amp;lt;&lt;/span>String&lt;span style="color:#666">&amp;gt;&lt;/span> list &lt;span style="color:#666">=&lt;/span> Arrays&lt;span style="color:#666">.&lt;/span>&lt;span style="color:#4070a0">asList&lt;/span>&lt;span style="color:#666">(&lt;/span>arr&lt;span style="color:#666">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>